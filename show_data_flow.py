"""
Visual representation of ABSA data flow in the Myntra Review Scrapper
"""

def print_data_flow_diagram():
    print("🎯 ABSA DATA FLOW - MYNTRA REVIEW SCRAPPER")
    print("=" * 60)
    print()
    
    print("📱 USER INPUT")
    print("    │")
    print("    ▼")
    print("🌐 STREAMLIT APP (app.py)")
    print("    │")
    print("    ▼")
    print("📋 INPUT METHOD SELECTION")
    print("    │")
    print("    ├─── 🔗 URL-BASED SCRAPING")
    print("    │    │")
    print("    │    ├─ validate_myntra_url()")
    print("    │    ├─ URLScrapeReviews class")
    print("    │    │  (src/scrapper/url_scrape.py)")
    print("    │    ├─ Chrome WebDriver")
    print("    │    ├─ BeautifulSoup parsing")
    print("    │    └─ Returns DataFrame")
    print("    │")
    print("    └─── 🔍 SEARCH-BASED SCRAPING")
    print("         │")
    print("         ├─ Product name + quantity")
    print("         ├─ ScrapeReviews class")
    print("         │  (src/scrapper/scrape.py)")
    print("         ├─ Chrome WebDriver")
    print("         ├─ BeautifulSoup parsing")
    print("         └─ Returns DataFrame")
    print("    │")
    print("    ▼")
    print("💾 DATA STORAGE")
    print("    │")
    print("    ├─ st.session_state storage")
    print("    ├─ MongoDB via MongoIO")
    print("    └─ (src/cloud_io/__init__.py)")
    print("    │")
    print("    ▼")
    print("📄 ANALYSIS PAGE")
    print("    │ (pages/generate_analysis.py)")
    print("    ▼")
    print("🎯 ABSA METHOD SELECTION")
    print("    │")
    print("    ├─── ⭐ VADER (Recommended)")
    print("    │    │ (src/absa/absa_analyzer.py)")
    print("    │    ├─ ABSAAnalyzer class")
    print("    │    └─ Rule-based sentiment")
    print("    │")
    print("    ├─── 🧪 ENHANCED (TextBlob+VADER)")
    print("    │    │ (src/absa/simple_advanced_absa.py)")
    print("    │    ├─ SimpleAdvancedABSA class")
    print("    │    └─ Combined approach")
    print("    │")
    print("    └─── 🤖 TRANSFORMER (Experimental)")
    print("         │ (src/absa/advanced_absa.py)")
    print("         ├─ AdvancedABSAAnalyzer class")
    print("         └─ HuggingFace models")
    print("    │")
    print("    ▼")
    print("🔍 ABSA PROCESSING PIPELINE")
    print("    │")
    print("    ├─ 1. preprocess_reviews()")
    print("    │   ├─ Text cleaning")
    print("    │   └─ Normalization")
    print("    │")
    print("    ├─ 2. extract_aspects()")
    print("    │   ├─ Keyword matching")
    print("    │   └─ Pattern recognition")
    print("    │")
    print("    ├─ 3. classify_sentiment()")
    print("    │   ├─ VADER analysis")
    print("    │   ├─ TextBlob polarity")
    print("    │   └─ Transformer models")
    print("    │")
    print("    ├─ 4. extract_aspect_context()")
    print("    │   └─ Context window extraction")
    print("    │")
    print("    └─ 5. Result compilation")
    print("        ├─ Enhanced reviews DataFrame")
    print("        ├─ Detailed ABSA DataFrame")
    print("        └─ Aspect summary statistics")
    print("    │")
    print("    ▼")
    print("📊 VISUALIZATION & RESULTS")
    print("    │")
    print("    ├─ 📈 Plotly charts")
    print("    │   ├─ Aspect distribution")
    print("    │   ├─ Sentiment heatmaps")
    print("    │   └─ Performance metrics")
    print("    │")
    print("    ├─ 🎨 Interactive dashboard")
    print("    │   ├─ Sample reviews")
    print("    │   ├─ Confidence scores")
    print("    │   └─ Model comparisons")
    print("    │")
    print("    └─ 💾 Export options")
    print("        ├─ CSV downloads")
    print("        └─ Enhanced data")
    print()
    print("🎯 DETECTED ASPECTS:")
    print("   • Style/Design")
    print("   • Quality/Material") 
    print("   • Size/Fit")
    print("   • Price/Value")
    print("   • Delivery/Service")
    print()
    print("📊 OUTPUT FORMATS:")
    print("   • Sentiment Labels: Positive/Negative/Neutral")
    print("   • Confidence Scores: 0.0 to 1.0")
    print("   • Compound Scores: -1.0 to +1.0")
    print("   • Aspect Counts and Percentages")

def print_file_structure():
    print("\n" + "=" * 60)
    print("📁 KEY FILES IN ABSA FLOW")
    print("=" * 60)
    
    files = [
        ("🌐 app.py", "Main Streamlit app - User interface & input handling"),
        ("📄 pages/generate_analysis.py", "Analysis page - ABSA method selection & results"),
        ("🔗 src/scrapper/url_scrape.py", "URL-based scraping - Direct product URL processing"),
        ("🔍 src/scrapper/scrape.py", "Search-based scraping - Product search & multi-product"),
        ("💾 src/cloud_io/__init__.py", "Database operations - MongoDB storage/retrieval"),
        ("🎯 src/absa/absa_analyzer.py", "Core ABSA - VADER sentiment analysis"),
        ("🧪 src/absa/simple_advanced_absa.py", "Enhanced ABSA - TextBlob + VADER combination"),
        ("🤖 src/absa/advanced_absa.py", "Advanced ABSA - Transformer models"),
        ("⚙️ src/exception.py", "Error handling - Custom exception management"),
        ("📊 src/data_report/generate_data_report.py", "General analytics - Non-ABSA visualizations")
    ]
    
    for icon_file, description in files:
        print(f"{icon_file:<40} │ {description}")

def print_data_structures():
    print("\n" + "=" * 60)
    print("📋 KEY DATA STRUCTURES")
    print("=" * 60)
    
    print("\n🔢 INPUT DATA (from scraping):")
    print("   DataFrame columns: [Product Name, Over_All_Rating, Price, Date, Rating, Name, Comment]")
    
    print("\n🎯 ABSA RESULTS (enhanced_reviews):")
    print("   Original columns + [detected_aspects, aspect_sentiments, avg_sentiment_score]")
    
    print("\n📊 DETAILED ANALYSIS (detailed_absa):")
    print("   [review_index, original_review, aspect, sentiment_label,")
    print("    positive_score, negative_score, neutral_score, compound_score,")
    print("    model_used, confidence]")
    
    print("\n📈 SUMMARY STATS (aspect_summary):")
    print("   [aspect, sentiment_label, count, avg_sentiment_score, percentage]")
    
    print("\n🎉 FINAL RESULTS (analysis_results dict):")
    print("   • product_name, total_reviews, overall_avg_sentiment")
    print("   • enhanced_reviews, detailed_absa, aspect_summary")
    print("   • most_mentioned_aspects, model_usage, confidence_stats")

if __name__ == "__main__":
    print_data_flow_diagram()
    print_file_structure()
    print_data_structures()
    
    print("\n" + "🎯" * 20)
    print("ABSA DATA FLOW SUMMARY COMPLETE!")
    print("🎯" * 20)
